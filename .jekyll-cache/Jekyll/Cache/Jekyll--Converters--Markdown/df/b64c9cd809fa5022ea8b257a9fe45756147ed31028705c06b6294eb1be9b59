I",<p>前阵子在公司研读项目代码，在硬件通信中涉及到数据类型的转换，byte与int之间的类型转换，研究了一番，重温了一些计算机基础知识，记录一下，毕竟这部分知识比较少用，容易忘。若只想知道怎么进行类型转换，请直接看文末。</p>

<h2 id="bitbyte">bit、byte</h2>

<p><strong>• bit (位)</strong> bit 电脑记忆体中最小的单位，在二进位电脑系统中，每一 bit 可以代表 0 或 1 的数位讯号。所以它能表示的数字范围就是 0 ~ 1。<br />
<strong>• byte (字节)</strong> 一个 byte 由 8 bit 组成，所以理论上一个 byte 能表示的数据范围是 0 ~ 255。</p>

<p>在一般的计算机设备中，CPU 分为 32位 和 64位，32位 CPU 能够寻址的范围是 4GB，所以过去的电脑设备内存最高一般只能到达 4GB。随着硬件技术的不断发展，越来越多的计算机采用 64位 的 CPU，这样以来计算机能够支持的最高内存就达到了 16GB。</p>

<p>而像操作系统也分为 32位 和 64位 ，其实这也是针对 CPU 来进行设计的。</p>

<p>32 bit 即 4 byte，也就是说一条CPU指令是 4 byte。在 32位 的操作系统中，CPU 执行一次能够读取 32 bit 的数据，如果一条 CPU 指令是 8 byte 的话，那 32位 操作系统就需要执行两次才能完成指令的读取，而 64位 操作系统因为一次能够读取 64 bit 的数据，所以 64位 系统只需要执行一次就能完成指令的读取。这也是为什么 64位 操作系统要比 32位 操作系统快一倍。</p>

<p>但有几点需要注意的：<br />
1.64位 CPU 机器可以安装 32位 的操作系统，但执行效率也就是 32位 操作系统的效率。<br />
2.32位 CPU 机器可以安装 64位 的操作系统。<br />
3.64位 CPU 机器安装 64位 的操作系统才最有效率，但这也跟软件优化有关系。</p>

<p>不同的操作系统平台，给C/C++ 基本数据类型变量分配的内存空间也是不一样的。</p>

<p><strong>32位 编译器：</strong> <br />
char ：1个字节<br />
char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）<br />
short int : 2个字节<br />
int：  4个字节<br />
unsigned int : 4个字节<br />
float:  4个字节<br />
double:   8个字节<br />
long:   4个字节<br />
long long:  8个字节<br />
unsigned long:  4个字节</p>

<p><strong>64位 编译器：</strong><br />
char ：1个字节<br />
char*(即指针变量): 8个字节<br />
short int : 2个字节<br />
int：  4个字节<br />
unsigned int : 4个字节<br />
float:  4个字节<br />
double:   8个字节<br />
long:   8个字节<br />
long long:  8个字节<br />
unsigned long:  8个字节</p>

<p><strong>而 iPhone 从iOS11开始就只支持64位，不再支持32位的app了。</strong></p>
<h2 id="原码反码补码">原码、反码、补码</h2>
<p><strong>• 原码</strong>：将一个数字转换成二进制就是这个数值的原码。注：最高位为符号位，正数符号位为0，负数符号位为1
{% highlight C %}
int a = 5;  // 原码 00000000 00000000 00000000 00000101
int b = -3; // 原码 10000000 00000000 00000000 00000011
{% endhighlight %}
<strong>• 反码</strong><br />
正数：正数的反码就是原码<br />
负数：负数的反码是在原码的基础上，符号位不变，其他的位都取反。
{% highlight C %}
int a = 5;  // 反码 00000000 00000000 00000000 00000101
int b = -3; // 反码 11111111 11111111 11111111 11111100
{% endhighlight %}
<strong>• 补码</strong><br />
正数：正数的补码就是原码<br />
负数：负数的补码就是在反码的基础上加1
{% highlight C %}
int a = 5;  // 补码 00000000 00000000 00000000 00000101
int b = -3; // 补码 11111111 11111111 11111111 11111101
{% endhighlight %}
正数的原码、反码、补码都是一样的，负数的反码是原码除符号位外取反，补码为反码加1</p>

<p><span style="color: red">在计算机中，所有的数据都是以补码的形式存储的。</span></p>
<h2 id="位运算">位运算</h2>
<h4 id="--与运算">• &amp; 与运算</h4>
<p>规则：与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值都是 1，则结果值相应的 bit 就是 1，否则为 0
{% highlight C %}
0 &amp; 0 = 0;
1 &amp; 0 = 0;
1 &amp; 1 = 1;</p>

<p>3 &amp; 5 = 1;
/*
00000000 00000000 00000000 00000101
&amp;
00000000 00000000 00000000 00000011
=
00000000 00000000 00000000 00000001
*/
{% endhighlight %}</p>
<h4 id="--或运算">• | 或运算</h4>
<p>规则：与运算时，进行运算的两个数，从最低位到最高位，一一对应。如果某 bit 的两个数值对应的值只要 1 个为 1，则结果值相应的 bit 就是 1，否则为 0
{% highlight C %}
0 | 0 = 0;
0 | 1 = 1;
1 | 1 = 1;</p>

<p>3 | 5 = 7;
/*
00000000 00000000 00000000 00000101
|
00000000 00000000 00000000 00000011
=
00000000 00000000 00000000 00000111
*/
{% endhighlight %}</p>
<h4 id="--取反运算">• ~ 取反运算</h4>
<p>规则：对操作数的每一位进行操作，1 变成 0，0 变成 1。
{% highlight C %}
~5 =&gt;  00000000 00000000 00000000 00000101   ~  =&gt; 11111111 11111111 11111111 11111010
{% endhighlight %}</p>
<h4 id="--异或运算">• ^ 异或运算</h4>
<p>规则：两个操作数进行异或时，对于同一位上，如果数值相同则为 0，数值不同则为 1
{% highlight C %}
1 ^ 0 = 1;
1 ^ 1 = 0;
0 ^ 0 = 0;</p>

<p>3 ^ 5 = 6;
/*
00000000 00000000 00000000 00000101</p>
<h1 id="00000000-00000000-00000000-00000011">00000000 00000000 00000000 00000011</h1>
<p>00000000 00000000 00000000 00000110
*/
{% endhighlight %}
值得注意的是 3 ^ 5 = 6,而 6 ^ 5 = 3<br />
针对这个特性，我们可以将异或运算作为一个简单的数据加密的形式。比如，将一个mp4文件所有数值与一个种子数值进行异或得到加密后的数据，解密的时候再将数据与种子数值进行异或一次就可以了。</p>

<p><strong>所以异或运算可以作为简单的加解密运算算法。</strong></p>

<h4 id="--右移运算符">• &gt;&gt; 右移运算符</h4>
<p>规则：a » b 将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向右方向移动 b 位，符号位不变，高位空出来的位补数值 0。
{% highlight C %}
5 » 1  ===&gt;  00000000 00000000 00000000 00000101 » 1  = 00000000 00000000 00000000 00000010 = 2
7 » 2  ===&gt;  00000000 00000000 00000000 00000111 » 2  = 00000000 00000000 00000000 00000001 = 1
9 » 3  ===&gt;  00000000 00000000 00000000 00001001 » 3  = 00000000 00000000 00000000 00000001 = 1
11 » 2 ===&gt;  00000000 00000000 00000000 00001011 » 2  = 00000000 00000000 00000000 00000010 = 2
{% endhighlight %}
<span style="color: gray">备注：a » b = a / ( 2 ^ b ) ,所以 5 » 1= 5 / 2 = 2,11 » 2 = 11 / 4 = 2</span></p>

<h4 id="--左移运算符">• &lt;&lt; 左移运算符</h4>
<p>规则：a « b 将数值 a 的二进制数值从 0 位算起到第 b - 1 位，整体向左方向移动 b 位，符号位不变，低位空出来的位补数值 0。
{% highlight C %}
5 « 1  ===&gt;  00000000 00000000 00000000 00000101 « 1  = 00000000 00000000 00000000 00001010 = 10
7 « 2  ===&gt;  00000000 00000000 00000000 00000111 « 2  = 00000000 00000000 00000000 00011100 = 28
9 « 3  ===&gt;  00000000 00000000 00000000 00001001 « 3  = 00000000 00000000 00000000 01001000 = 72
11 « 2 ===&gt;  00000000 00000000 00000000 00001011 « 2  = 00000000 00000000 00000000 00101100 = 44
{% endhighlight %}
<span style="color: gray">备注：a « b = a * (2 ^ b)</span> <br />
<span style="color: orange">结合右移运算的例子，不难看出，如果某个数值右移 n 位，就相当于拿这个数值去除以 2 的 n 次幂。如果某个数值左移 n 位，就相当于这个数值乘以 2 ^ n。</span></p>

<h2 id="int-转-byte">int 转 byte</h2>
<p>{% highlight Objective-C %}</p>
<ul>
  <li>(Byte *)intToByte:(int)value {
  Byte *byte = malloc(4);
  Byte a = ((value»24) &amp; 0xFF);
  Byte b = ((value»16) &amp; 0xFF);
  Byte c = ((value»8) &amp; 0xFF);
  Byte d = (value&amp; 0xFF);
  byte[0] = a;
  byte[1] = b;
  byte[2] = c;
  byte[3] = d;
  NSLog(@”a = %d, b = %d, c = %d, d = %d”, a, b, c, d); // a = 255, b = 255, c = 255, d = 248
  return byte;
}
intToByte(-8)
{% endhighlight %}
分析：
```
整型-8的原码: 10000000 00000000 00000000 00001000<br />
     反码: 11111111 11111111 11111111 11110111<br />
     补码: 11111111 11111111 11111111 11111000</li>
</ul>

<p>value » 24: 00000000 00000000 00000000 11111111
     &amp; 0xFF:                            11111111
          =                             11111111</p>

<p>value » 16: 00000000 00000000 11111111 11111111
     &amp; 0xFF:                            11111111
          =                             11111111</p>

<p>value » 8: 00000000 11111111 11111111 11111111
    &amp; 0xFF:                            11111111
         =                             11111111</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> value: 11111111 11111111 11111111 11111000
&amp; 0xFF:                            11111111
     =                             11111000 ``` ## byte 转 int {% highlight Objective-C %} - (int)byteToInt:(Byte *)byte {
int value = byte[0]&lt;&lt;24 | byte[1]&lt;&lt;16 | byte[2]&lt;&lt;8 | byte[3];
return value; }
</code></pre></div></div>

<p>Byte *byte = malloc(4);
byte[0] = 255;
byte[1] = 255;
byte[2] = 255;
byte[3] = 248;
NSLog(@”%d”, [self byteToInt:byte]); // -8
{% endhighlight %}
分析：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>byte[0]: 11111111
byte[1]: 11111111
byte[2]: 11111111
byte[3]: 11111000

byte[0] &lt;&lt; 24 : 11111111 00000000 00000000 00000000
byte[1] &lt;&lt; 16 :          11111111 00000000 00000000
 byte[2] &lt;&lt; 8 :                   11111111 00000000
      byte[3] :                            11111000
byte[0]&lt;&lt;24 | byte[1]&lt;&lt;16 | byte[2]&lt;&lt;8 | byte[3]
= 11111111 11111111 11111111 11111000
由于最高位为1，证明原码为负数，则当前得到的结果为补码。
补码: 11111111 11111111 11111111 11111000
反码: 11111111 11111111 11111111 11110111
原码: 10000000 00000000 00000000 00001000
因此最后的结果为-8
</code></pre></div></div>

<h3 id="延伸">延伸</h3>
<p>byte强制转换为int
{% highlight Objective-C %}
Byte a = -8;
NSLog(@”%d”, a);     // 248
{% endhighlight %}
-8<br />
原码：10001000<br />
反码：10000111<br />
补码：11111000<br />
因为系统内存存储的是补码，所以在内存中a的存储是11111000<br />
那么，将a转为int类型，因为int的长度为4byte，系统自动在前面补0，即 00000000 00000000 00000000 11111000<br />
由于最高位为0，系统将其判断为正数，而正数的补码就是原码，因此原码也为 00000000 00000000 00000000 11111000<br />
所以直接将byte强制转为int，结果为248。</p>

<p>参考：<a href="https://blog.csdn.net/briblue/article/details/70296326">可能是最通熟易懂的Java位操作运算讲解</a></p>
:ET