---
layout: post
title:  "算法时间复杂度的计算方法"
date:   2018-06-11 00:02:00.000000000 +09:00
tags: [计算机基础]
---
首先先了解一下算法时间复杂度的定义：    
**在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随n的变化情况确定T(n)的数量级。算法的时间复杂度，也就是算法的时间量度，记作：T(n) = O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。**    
一般用大写 O() 来体现算法时间复杂度，即大O记法。        
**推导大 O 阶：**    
1.用常数1取代运行时间中的所有加法常数。    
2.在修改后的运行次数函数中，只保留最高阶项。    
3.如果最高阶项存在且不是1，则去除与这个项相乘的常数。    
例：同个问题的3个解决算法，G(2n^3)、H(3n+1)、I(2n^2+3n+1)，这3个算法的时间复杂度分别为O(n^3)、O(n)、O(n^2)。通过时间复杂度的比较，H算法最高效，G算法最耗时。    
### 常见的时间复杂度
| 执行次数函数 |  阶  | 非正式术语 |    
| ---------- | ---- | -------- |    
| 12 | O(1) | 常数阶 |    
| 2n+3 | O(n) | 线性阶 |    
| 3n^2+2n+1 | O(n^2) | 平方阶 |    
| 5log_{2}n+19 | O(logn) | 对数阶 |    
| 2n+3nlog_{2}n+19 | O(nlogn) | nlogn阶 |    
| 6n^3+2n^2+3n+4 | O(n^3) | 立方阶 |    
| 2^n | O(2^n) | 指数阶 |    
常见的时间复杂度所耗费的时间从小到大依次是：    
**O(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)**

